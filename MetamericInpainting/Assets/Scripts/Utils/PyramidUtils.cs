using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PyramidUtils
{

    public static float[] getFilter(int filter, bool hiq, bool combinedMatrices = false, int nbands = 2)
    {
        float[][] filters;

        if(nbands == 4) 
            filters = fourFilters;
        else if (nbands == 6) {
            if (combinedMatrices)
            {
                filters = sixFilters_combined;
            }
            else
                filters = sixFilters;
        }
        else if (combinedMatrices)
            filters = doubleFilters;
        else if (hiq)
            filters = bigFilters;
        else
            filters = smallFilters;

        return filters[filter];
    }

    public static int getFilterWidth(int filter, bool hiq, bool combinedMatrices = false, int nbands = 2)
    {
        int[] filtersWidths;
        if (nbands == 4)
            filtersWidths = fourFilterSizes;
        else if (nbands == 6)
        {
            if (combinedMatrices)
            {
                filtersWidths = sixFilterSizes_combined;
            }
            else
            {
                filtersWidths = sixFilterSizes;
            }
        }
        else if (combinedMatrices)
            filtersWidths = doubleFilterSizes;
        else if (hiq)
            filtersWidths = bigFilterSizes;
        else
            filtersWidths = smallFilterSizes;

        return filtersWidths[filter];
    }

    private static float[] loPassBig = {-8.701000e-05f, -1.354280e-03f, -1.601260e-03f, -5.033700e-04f,2.524010e-03f, -5.033700e-04f, -1.601260e-03f, -1.354280e-03f,-8.701000e-05f,
                                    -1.354280e-03f, 2.921580e-03f, 7.522720e-03f, 8.224420e-03f,1.107620e-03f, 8.224420e-03f, 7.522720e-03f, 2.921580e-03f,-1.354280e-03f,
                                    -1.601260e-03f, 7.522720e-03f, -7.061290e-03f, -3.769487e-02f,-3.297137e-02f, -3.769487e-02f, -7.061290e-03f, 7.522720e-03f,-1.601260e-03f,
                                    -5.033700e-04f, 8.224420e-03f, -3.769487e-02f, 4.381320e-02f,1.811603e-01f, 4.381320e-02f, -3.769487e-02f, 8.224420e-03f,-5.033700e-04f,
                                    2.524010e-03f, 1.107620e-03f, -3.297137e-02f, 1.811603e-01f,4.376250e-01f, 1.811603e-01f, -3.297137e-02f, 1.107620e-03f,2.524010e-03f,
                                    -5.033700e-04f, 8.224420e-03f, -3.769487e-02f, 4.381320e-02f,1.811603e-01f, 4.381320e-02f, -3.769487e-02f, 8.224420e-03f,-5.033700e-04f,
                                    -1.601260e-03f, 7.522720e-03f, -7.061290e-03f, -3.769487e-02f,-3.297137e-02f, -3.769487e-02f, -7.061290e-03f, 7.522720e-03f,-1.601260e-03f,
                                    -1.354280e-03f, 2.921580e-03f, 7.522720e-03f, 8.224420e-03f,1.107620e-03f, 8.224420e-03f, 7.522720e-03f, 2.921580e-03f,-1.354280e-03f,
                                    -8.701000e-05f, -1.354280e-03f, -1.601260e-03f, -5.033700e-04f,2.524010e-03f, -5.033700e-04f, -1.601260e-03f, -1.354280e-03f,-8.701000e-05f};


    private static float[] hiPassBig = {-9.570000e-04f, -2.424100e-04f, -1.424720e-03f, -8.742600e-04f,-1.166810e-03f, -8.742600e-04f, -1.424720e-03f, -2.424100e-04f,-9.570000e-04f,
                                    -2.424100e-04f, -4.317530e-03f, 8.998600e-04f, 9.156420e-03f,1.098012e-02f, 9.156420e-03f, 8.998600e-04f, -4.317530e-03f,-2.424100e-04f,
                                    -1.424720e-03f, 8.998600e-04f, 1.706347e-02f, 1.094866e-02f,-5.897780e-03f, 1.094866e-02f, 1.706347e-02f, 8.998600e-04f,-1.424720e-03f,
                                    -8.742600e-04f, 9.156420e-03f, 1.094866e-02f, -7.841370e-02f,-1.562827e-01f, -7.841370e-02f, 1.094866e-02f, 9.156420e-03f,-8.742600e-04f,
                                    -1.166810e-03f, 1.098012e-02f, -5.897780e-03f, -1.562827e-01f,7.282593e-01f, -1.562827e-01f, -5.897780e-03f, 1.098012e-02f,-1.166810e-03f,
                                    -8.742600e-04f, 9.156420e-03f, 1.094866e-02f, -7.841370e-02f,-1.562827e-01f, -7.841370e-02f, 1.094866e-02f, 9.156420e-03f,-8.742600e-04f,
                                    -1.424720e-03f, 8.998600e-04f, 1.706347e-02f, 1.094866e-02f,-5.897780e-03f, 1.094866e-02f, 1.706347e-02f, 8.998600e-04f,-1.424720e-03f,
                                    -2.424100e-04f, -4.317530e-03f, 8.998600e-04f, 9.156420e-03f,1.098012e-02f, 9.156420e-03f, 8.998600e-04f, -4.317530e-03f,-2.424100e-04f,
                                    -9.570000e-04f, -2.424100e-04f, -1.424720e-03f, -8.742600e-04f,-1.166810e-03f, -8.742600e-04f, -1.424720e-03f, -2.424100e-04f,-9.570000e-04f
                                    };




    private static float[] b1Big = {6.125880e-03f, -8.052600e-03f, -2.103714e-02f, -1.536890e-02f, -1.851466e-02f, -1.536890e-02f, -2.103714e-02f, -8.052600e-03f, 6.125880e-03f,
                                -1.287416e-02f, -9.611520e-03f, 1.023569e-02f, 6.009450e-03f, 1.872620e-03f, 6.009450e-03f, 1.023569e-02f, -9.611520e-03f, -1.287416e-02f,
                                -5.641530e-03f, 4.168400e-03f, -2.382180e-02f, -5.375324e-02f, -2.076086e-02f, -5.375324e-02f, -2.382180e-02f, 4.168400e-03f, -5.641530e-03f,
                                -8.957260e-03f, -1.751170e-03f, -1.836909e-02f, 1.265655e-01f, 2.996168e-01f, 1.265655e-01f, -1.836909e-02f, -1.751170e-03f, -8.957260e-03f,
                                0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f,
                                8.957260e-03f, 1.751170e-03f, 1.836909e-02f, -1.265655e-01f, -2.996168e-01f, -1.265655e-01f, 1.836909e-02f, 1.751170e-03f, 8.957260e-03f,
                                5.641530e-03f, -4.168400e-03f, 2.382180e-02f, 5.375324e-02f, 2.076086e-02f, 5.375324e-02f, 2.382180e-02f, -4.168400e-03f, 5.641530e-03f,
                                 1.287416e-02f, 9.611520e-03f, -1.023569e-02f, -6.009450e-03f, -1.872620e-03f, -6.009450e-03f, -1.023569e-02f, 9.611520e-03f, 1.287416e-02f,
                                -6.125880e-03f, 8.052600e-03f, 2.103714e-02f, 1.536890e-02f, 1.851466e-02f, 1.536890e-02f, 2.103714e-02f, 8.052600e-03f, -6.125880e-03f
                                };



    private static float[] b0Big = {-6.125880e-03f, 1.287416e-02f, 5.641530e-03f, 8.957260e-03f, 0.000000e+00f, -8.957260e-03f, -5.641530e-03f, -1.287416e-02f, 6.125880e-03f,
                                8.052600e-03f, 9.611520e-03f, -4.168400e-03f, 1.751170e-03f, 0.000000e+00f, -1.751170e-03f, 4.168400e-03f, -9.611520e-03f, -8.052600e-03f,
                                2.103714e-02f, -1.023569e-02f,2.382180e-02f, 1.836909e-02f, 0.000000e+00f, -1.836909e-02f,-2.382180e-02f, 1.023569e-02f, -2.103714e-02f,
                                1.536890e-02f, -6.009450e-03f, 5.375324e-02f, -1.265655e-01f, 0.000000e+00f, 1.265655e-01f, -5.375324e-02f, 6.009450e-03f, -1.536890e-02f,
                                1.851466e-02f, -1.872620e-03f, 2.076086e-02f, -2.996168e-01f,0.000000e+00f, 2.996168e-01f, -2.076086e-02f, 1.872620e-03f, -1.851466e-02f,
                                1.536890e-02f, -6.009450e-03f, 5.375324e-02f, -1.265655e-01f, 0.000000e+00f, 1.265655e-01f, -5.375324e-02f, 6.009450e-03f, -1.536890e-02f,
                                2.103714e-02f, -1.023569e-02f, 2.382180e-02f, 1.836909e-02f, 0.000000e+00f, -1.836909e-02f, -2.382180e-02f, 1.023569e-02f, -2.103714e-02f,
                                8.052600e-03f, 9.611520e-03f, -4.168400e-03f, 1.751170e-03f, 0.000000e+00f, -1.751170e-03f, 4.168400e-03f, -9.611520e-03f, -8.052600e-03f,
                                -6.125880e-03f, 1.287416e-02f, 5.641530e-03f, 8.957260e-03f, 0.000000e+00f, -8.957260e-03f, -5.641530e-03f, -1.287416e-02f, 6.125880e-03f};


    private static float[][] bigFilters = { hiPassBig, loPassBig, b0Big, b1Big };
    private static int[] bigFilterSizes = { 9, 9, 9, 9 };

    private static float[] hiPass = {0.0171f,  0.0109f, -0.0059f,  0.0109f,  0.0171f,
                                    0.0109f, -0.0784f, -0.1563f, -0.0784f,  0.0109f,
                                    -0.0059f, -0.1563f,  0.7283f, -0.1563f, -0.0059f,
                                    0.0109f, -0.0784f, -0.1563f, -0.0784f,  0.0109f,
                                    0.0171f,  0.0109f, -0.0059f,  0.0109f,  0.0171f };


    private static float[] loPass = {0.0029f,  0.0074f,  0.0081f,  0.0011f,  0.0081f,  0.0074f,  0.0029f,
                                        0.0074f, -0.0069f, -0.0370f, -0.0324f, -0.0370f, -0.0069f,  0.0074f,
                                        0.0081f, -0.0370f,  0.0430f,  0.1780f,  0.0430f, -0.0370f,  0.0081f,
                                        0.0011f, -0.0324f,  0.1780f,  0.4299f,  0.1780f, -0.0324f,  0.0011f,
                                        0.0081f, -0.0370f,  0.0430f,  0.1780f,  0.0430f, -0.0370f,  0.0081f,
                                        0.0074f, -0.0069f, -0.0370f, -0.0324f, -0.0370f, -0.0069f,  0.0074f,
                                        0.0029f,  0.0074f,  0.0081f,  0.0011f,  0.0081f,  0.0074f,  0.0029f};


    private static float[] b0 = {0.032222614f, 0.024482146f, -0.000954266f, -0.022387728f, -0.035675224f,
                                0.058944207f, -0.12301787f, -0.002386391f, 0.124580316f, -0.059321865f,
                                0.028454272f, -0.295336992f, -0.002088876f, 0.297662646f, -0.028157627f,
                                0.058783099f, -0.12278682f, -0.002462445f, 0.125158116f, -0.058609232f,
                                0.035939854f, 0.024547214f, -0.004234251f, -0.022365246f, -0.032746479f
                                };

    private static float[] b1 = { 3.9758663625e-02f,  6.0679119080e-02f,  3.0146904290e-02f, 6.1198268086e-02f,  3.6218870431e-02f,
                                    2.3255519569e-02f, -1.2505133450e-01f, -2.9738345742e-01f, -1.2518258393e-01f,  2.3592948914e-02f,
                                -1.3602430699e-03f, -1.2058277935e-04f,  2.6399988565e-04f, -2.3791544663e-04f,  1.8450465286e-03f,
                                -2.1563466638e-02f,  1.2572696805e-01f,  2.9745018482e-01f, 1.2458638102e-01f, -2.3847281933e-02f,
                                -3.7941932678e-02f, -6.1060950160e-02f, -2.9489086941e-02f, -6.0411967337e-02f, -3.8459088653e-02f};


    private static float[][] smallFilters = { hiPass, loPass, b0, b1 };
    private static int[] smallFilterSizes = { 5, 7, 5, 5 };


    private static float[] b0b0 =
    { 0.010734139941632748f, -0.015781793743371964f, 0.026085395365953445f, -0.015781793743371964f, 0.010734139941632748f,
    -0.05432392656803131f, -0.03271482512354851f, 0.1617702841758728f, -0.032714828848838806f, -0.05432392656803131f,
    -0.10883874446153641f, -0.03026774898171425f, 0.27084726095199585f, -0.03026774898171425f, -0.10883874446153641f,
    -0.05432392656803131f, -0.032714828848838806f, 0.1617702841758728f, -0.03271482512354851f, -0.05432392656803131f,
    0.010734139941632748f, -0.015781793743371964f, 0.026085395365953445f, -0.015781793743371964f, 0.010734139941632748f};


    private static float[] b1b1 =
     { 0.010734141804277897f, -0.05432393401861191f, -0.10883874446153641f, -0.05432393401861191f, 0.010734141804277897f,
-0.015781793743371964f, -0.032714828848838806f, -0.03026774898171425f, -0.03271482139825821f, -0.015781793743371964f,
0.026085399091243744f, 0.1617702841758728f, 0.27084729075431824f, 0.1617702841758728f, 0.026085399091243744f,
-0.015781793743371964f, -0.03271482139825821f, -0.03026774898171425f, -0.032714828848838806f, -0.015781793743371964f,
0.010734141804277897f, -0.05432393401861191f, -0.10883874446153641f, -0.05432393401861191f, 0.010734141804277897f};


    private static float[] h0h0 =
       { -0.03341418504714966f, -0.14030639827251434f, -0.03341418504714966f,
        -0.14030641317367554f, 0.6948823928833008f, -0.14030641317367554f,
        -0.03341418504714966f, -0.14030639827251434f, -0.03341418504714966f};


    private static float[][] doubleFilters = { h0h0, loPass, b0b0, b1b1 };
    private static int[] doubleFilterSizes = { 3, 7, 5, 5 };

    //6 bands

    private static float[] hi_6 =
    {-0.00033429f, -0.00113093f, -0.00171484f,-0.00133542f, -0.00080639f, -0.00133542f,-0.00171484f, -0.00113093f, -0.00033429f,
    -0.00113093f, -0.00350017f, -0.00243812f,0.00631653f, 0.01261227f, 0.00631653f,-0.00243812f, -0.00350017f, -0.00113093f,
    -0.00171484f, -0.00243812f, -0.00290081f,-0.00673482f, -0.00981051f, -0.00673482f,-0.00290081f, -0.00243812f, -0.00171484f,
    -0.00133542f, 0.00631653f, -0.00673482f,-0.07027679f, -0.11435863f, -0.07027679f,-0.00673482f, 0.00631653f, -0.00133542f,
    -0.00080639f, 0.01261227f, -0.00981051f,-0.11435863f, 0.81380200f, -0.11435863f,-0.00981051f, 0.01261227f, -0.00080639f,
    -0.00133542f, 0.00631653f, -0.00673482f,-0.07027679f, -0.11435863f, -0.07027679f,-0.00673482f, 0.00631653f, -0.00133542f,
    -0.00171484f, -0.00243812f, -0.00290081f,-0.00673482f, -0.00981051f, -0.00673482f,-0.00290081f, -0.00243812f, -0.00171484f,
    -0.00113093f, -0.00350017f, -0.00243812f,0.00631653f, 0.01261227f, 0.00631653f,-0.00243812f, -0.00350017f, -0.00113093f,
    -0.00033429f, -0.00113093f, -0.00171484f,-0.00133542f, -0.00080639f, -0.00133542f,-0.00171484f, -0.00113093f, -0.00033429f};

    private static float[] lo_6 =
    {0.00341614f, -0.01551246f, -0.03848215f, -0.01551246f,0.00341614f,
    -0.01551246f, 0.05586982f, 0.15925570f, 0.05586982f,-0.01551246f,
    -0.03848215f, 0.15925570f, 0.40304148f, 0.15925570f,-0.03848215f,
    -0.01551246f, 0.05586982f, 0.15925570f, 0.05586982f,-0.01551246f,
    0.00341614f, -0.01551246f, -0.03848215f, -0.01551246f,0.00341614f};

    private static float[] b0_6 =
    {0.00277643f, 0.00496194f, 0.01026699f, 0.01455399f, 0.01026699f,0.00496194f, 0.00277643f,
    -0.00986904f, -0.00893064f,0.01189859f, 0.02755155f, 0.01189859f, -0.00893064f,-0.00986904f,
    -0.01021852f, -0.03075356f, -0.08226445f,-0.11732297f, -0.08226445f, -0.03075356f, -0.01021852f,
    0.00000000f, 0.00000000f, 0.00000000f, 0.00000000f, 0.00000000f,0.00000000f, 0.00000000f,
    0.01021852f, 0.03075356f, 0.08226445f,0.11732297f, 0.08226445f, 0.03075356f, 0.01021852f,
    0.00986904f,0.00893064f, -0.01189859f, -0.02755155f, -0.01189859f,0.00893064f, 0.00986904f,
    -0.00277643f, -0.00496194f,-0.01026699f, -0.01455399f, -0.01026699f, -0.00496194f,-0.00277643f};

    private static float[] b1_6 =
    {-0.00343249f, -0.00640815f, -0.00073141f, 0.01124321f,0.00182078f, 0.00285723f, 0.01166982f,
    -0.00358461f,-0.01977507f, -0.04084211f, -0.00228219f, 0.03930573f,0.01161195f, 0.00128000f,
    0.01047717f, 0.01486305f,-0.04819057f, -0.12227230f, -0.05394139f, 0.00853965f,-0.00459034f,
    0.00790407f, 0.04435647f, 0.09454202f,-0.00000000f, -0.09454202f, -0.04435647f, -0.00790407f,
    0.00459034f, -0.00853965f, 0.05394139f, 0.12227230f,0.04819057f, -0.01486305f, -0.01047717f,
    -0.00128000f,-0.01161195f, -0.03930573f, 0.00228219f, 0.04084211f,0.01977507f, 0.00358461f,
    -0.01166982f, -0.00285723f,-0.00182078f, -0.01124321f, 0.00073141f, 0.00640815f,0.00343249f};

    private static float[] b2_6 =
    {0.00343249f, 0.00358461f, -0.01047717f, -0.00790407f,-0.00459034f, 0.00128000f, 0.01166982f,
    0.00640815f,0.01977507f, -0.01486305f, -0.04435647f, 0.00853965f,0.01161195f, 0.00285723f,
    0.00073141f, 0.04084211f, 0.04819057f,-0.09454202f, -0.05394139f, 0.03930573f, 0.00182078f,
    -0.01124321f, 0.00228219f, 0.12227230f, -0.00000000f,-0.12227230f, -0.00228219f, 0.01124321f,
    -0.00182078f,-0.03930573f, 0.05394139f, 0.09454202f, -0.04819057f,-0.04084211f, -0.00073141f,
    -0.00285723f, -0.01161195f,-0.00853965f, 0.04435647f, 0.01486305f, -0.01977507f,-0.00640815f,
    -0.01166982f, -0.00128000f, 0.00459034f,0.00790407f, 0.01047717f, -0.00358461f, -0.00343249f};

    private static float[] b3_6 =
    {-0.00277643f, 0.00986904f, 0.01021852f, -0.00000000f,-0.01021852f, -0.00986904f, 0.00277643f,
    -0.00496194f,0.00893064f, 0.03075356f, -0.00000000f, -0.03075356f,-0.00893064f, 0.00496194f,
    -0.01026699f, -0.01189859f,0.08226445f, -0.00000000f, -0.08226445f, 0.01189859f,0.01026699f,
    -0.01455399f, -0.02755155f, 0.11732297f,-0.00000000f, -0.11732297f, 0.02755155f, 0.01455399f,
    -0.01026699f, -0.01189859f, 0.08226445f, -0.00000000f,-0.08226445f, 0.01189859f, 0.01026699f,
    -0.00496194f,0.00893064f, 0.03075356f, -0.00000000f, -0.03075356f,-0.00893064f, 0.00496194f,
    -0.00277643f, 0.00986904f,0.01021852f, -0.00000000f, -0.01021852f, -0.00986904f,0.00277643f};

    private static float[] b4_6 =
    {-0.01166982f, -0.00128000f, 0.00459034f, 0.00790407f,0.01047717f, -0.00358461f, -0.00343249f,
    -0.00285723f,-0.01161195f, -0.00853965f, 0.04435647f, 0.01486305f,-0.01977507f, -0.00640815f,
    -0.00182078f, -0.03930573f,0.05394139f, 0.09454202f, -0.04819057f, -0.04084211f,-0.00073141f,
    -0.01124321f, 0.00228219f, 0.12227230f,-0.00000000f, -0.12227230f, -0.00228219f, 0.01124321f,
    0.00073141f, 0.04084211f, 0.04819057f, -0.09454202f,-0.05394139f, 0.03930573f, 0.00182078f,
    0.00640815f,0.01977507f, -0.01486305f, -0.04435647f, 0.00853965f,0.01161195f, 0.00285723f,
    0.00343249f, 0.00358461f,-0.01047717f, -0.00790407f, -0.00459034f, 0.00128000f,0.01166982f};

    private static float[] b5_6 =
    {-0.01166982f, -0.00285723f, -0.00182078f, -0.01124321f,0.00073141f, 0.00640815f, 0.00343249f,
    -0.00128000f,-0.01161195f, -0.03930573f, 0.00228219f, 0.04084211f,0.01977507f, 0.00358461f,
    0.00459034f, -0.00853965f,0.05394139f, 0.12227230f, 0.04819057f, -0.01486305f,-0.01047717f,
    0.00790407f, 0.04435647f, 0.09454202f,-0.00000000f, -0.09454202f, -0.04435647f, -0.00790407f,
    0.01047717f, 0.01486305f, -0.04819057f, -0.12227230f,-0.05394139f, 0.00853965f, -0.00459034f,
    -0.00358461f,-0.01977507f, -0.04084211f, -0.00228219f, 0.03930573f,0.01161195f, 0.00128000f,
    -0.00343249f, -0.00640815f,-0.00073141f, 0.01124321f, 0.00182078f, 0.00285723f,0.01166982f};

    private static float[][] sixFilters = { hi_6, lo_6, b0_6, b1_6, b2_6, b3_6,b4_6,b5_6 };
    private static int[] sixFilterSizes = { 9, 5, 7, 7, 7, 7,7,7 };

    //combined

    private static float[] hi_6_combined =
{ -0.06116412952542305f, -0.1282339096069336f, -0.06116413697600365f,
-0.1282339245080948f, 0.7575922012329102f, -0.1282339245080948f,
-0.06116413697600365f, -0.1282339096069336f, -0.06116412952542305f};





    private static float[] b0_6_combined =
{ -0.016547800973057747f, 0.0034774395171552896f, 0.03430509939789772f, 0.0034774395171552896f, -0.016547799110412598f,
-0.027982693165540695f, -0.0015662952791899443f, 0.055610544979572296f, -0.0015662952791899443f, -0.027982696890830994f,
-0.033384907990694046f, -0.004342036321759224f, 0.06610000878572464f, -0.004342036321759224f, -0.033384907990694046f,
-0.027982696890830994f, -0.0015662952791899443f, 0.055610544979572296f, -0.0015662952791899443f, -0.027982693165540695f,
-0.016547799110412598f, 0.0034774395171552896f, 0.03430509939789772f, 0.0034774395171552896f, -0.016547800973057747f};



    private static float[] b1_6_combined =
{ 0.010871395468711853f, 0.0321492999792099f, -0.011646565981209278f, -0.028663258999586105f, 0.0029146093875169754f,
-0.01851925626397133f, 0.045354582369327545f, 0.03445567190647125f, -0.04132425785064697f, -0.02105124481022358f,
-0.04186857119202614f, 0.0018408165778964758f, 0.07097356021404266f, 0.0018408165778964758f, -0.04186857119202614f,
-0.02105124481022358f, -0.04132425785064697f, 0.03445567190647125f, 0.045354582369327545f, -0.01851925626397133f,
0.0029146093875169754f, -0.028663258999586105f, -0.011646565981209278f, 0.0321492999792099f, 0.010871395468711853f};

    private static float[] b2_6_combined =
{ 0.01087139267474413f, -0.01851925440132618f, -0.04186857119202614f, -0.02105124481022358f, 0.002914608456194401f,
0.0321493037045002f, 0.045354586094617844f, 0.0018408159958198667f, -0.041324254125356674f, -0.028663258999586105f,
-0.011646567843854427f, 0.03445567190647125f, 0.07097355276346207f, 0.03445567190647125f, -0.011646567843854427f,
-0.028663258999586105f, -0.041324254125356674f, 0.0018408159958198667f, 0.045354586094617844f, 0.0321493037045002f,
0.002914608456194401f, -0.02105124481022358f, -0.04186857119202614f, -0.01851925440132618f, 0.01087139267474413f};


    private static float[] b3_6_combined =
 { -0.016547799110412598f, -0.027982696890830994f, -0.033384907990694046f, -0.027982696890830994f, -0.016547799110412598f,
0.003477440681308508f, -0.001566294115036726f, -0.004342036787420511f, -0.0015662945806980133f, 0.003477440681308508f,
0.03430509939789772f, 0.055610544979572296f, 0.06610002368688583f, 0.055610544979572296f, 0.03430509939789772f,
0.003477440681308508f, -0.0015662945806980133f, -0.004342036787420511f, -0.001566294115036726f, 0.003477440681308508f,
-0.016547799110412598f, -0.027982696890830994f, -0.033384907990694046f, -0.027982696890830994f, -0.016547799110412598f};





    private static float[] b4_6_combined =
{ 0.002914608921855688f, -0.02105124667286873f, -0.04186856746673584f, -0.01851925440132618f, 0.010871393606066704f,
-0.028663258999586105f, -0.041324250400066376f, 0.0018408161122351885f, 0.045354586094617844f, 0.0321492999792099f,
-0.011646567843854427f, 0.03445567190647125f, 0.07097355276346207f, 0.03445567190647125f, -0.011646567843854427f,
0.0321492999792099f, 0.045354586094617844f, 0.0018408161122351885f, -0.041324250400066376f, -0.028663258999586105f,
0.010871393606066704f, -0.01851925440132618f, -0.04186856746673584f, -0.02105124667286873f, 0.002914608921855688f};



    private static float[] b5_6_combined =

{ 0.0029146093875169754f, -0.028663260862231255f, -0.011646566912531853f, 0.0321492999792099f, 0.010871394537389278f,
-0.02105124481022358f, -0.04132425785064697f, 0.03445567563176155f, 0.045354586094617844f, -0.01851925626397133f,
-0.04186857119202614f, 0.001840816461481154f, 0.07097355276346207f, 0.001840816461481154f, -0.04186857119202614f,
-0.01851925626397133f, 0.045354586094617844f, 0.03445567563176155f, -0.04132425785064697f, -0.02105124481022358f,
0.010871394537389278f, 0.0321492999792099f, -0.011646566912531853f, -0.028663260862231255f, 0.0029146093875169754f};






    private static float[][] sixFilters_combined = { hi_6_combined, lo_6, b0_6_combined, b1_6_combined, b2_6_combined, b3_6_combined, b4_6_combined, b5_6_combined };
    private static int[] sixFilterSizes_combined = { 3, 5, 5, 5, 5, 5, 5, 5 };

    //4 bands
    private static float[] lo_4 =
    {-8.7009997515E-5f, -1.3542800443E-3f, -1.6012600390E-3f,-5.0337001448E-4f, 2.5240099058E-3f, -5.0337001448E-4f,-1.6012600390E-3f, -1.3542800443E-3f, -8.7009997515E-5f,
    -1.3542800443E-3f, 2.9215801042E-3f, 7.5227199122E-3f,8.2244202495E-3f, 1.1076199589E-3f, 8.2244202495E-3f,7.5227199122E-3f, 2.9215801042E-3f, -1.3542800443E-3f,
    -1.6012600390E-3f, 7.5227199122E-3f, -7.0612900890E-3f,-3.7694871426E-2f, -3.2971370965E-2f, -3.7694871426E-2f,-7.0612900890E-3f, 7.5227199122E-3f, -1.6012600390E-3f,
    -5.0337001448E-4f, 8.2244202495E-3f, -3.7694871426E-2f,4.3813198805E-2f, 0.1811603010f, 4.3813198805E-2f,-3.7694871426E-2f, 8.2244202495E-3f, -5.0337001448E-4f,
    2.5240099058E-3f, 1.1076199589E-3f, -3.2971370965E-2f,0.1811603010f, 0.4376249909f, 0.1811603010f,-3.2971370965E-2f, 1.1076199589E-3f, 2.5240099058E-3f,
    -5.0337001448E-4f, 8.2244202495E-3f, -3.7694871426E-2f,4.3813198805E-2f, 0.1811603010f, 4.3813198805E-2f,-3.7694871426E-2f, 8.2244202495E-3f, -5.0337001448E-4f,
    -1.6012600390E-3f, 7.5227199122E-3f, -7.0612900890E-3f,-3.7694871426E-2f, -3.2971370965E-2f, -3.7694871426E-2f,-7.0612900890E-3f, 7.5227199122E-3f, -1.6012600390E-3f,
    -1.3542800443E-3f, 2.9215801042E-3f, 7.5227199122E-3f,8.2244202495E-3f, 1.1076199589E-3f, 8.2244202495E-3f,7.5227199122E-3f, 2.9215801042E-3f, -1.3542800443E-3f,
    -8.7009997515E-5f, -1.3542800443E-3f, -1.6012600390E-3f,-5.0337001448E-4f, 2.5240099058E-3f, -5.0337001448E-4f,-1.6012600390E-3f, -1.3542800443E-3f, -8.7009997515E-5f};


private static float[] hi_4 =
    {-4.0483998600E-4f, -6.2596000498E-4f, -3.7829999201E-5f,8.8387000142E-4f, 1.5450799838E-3f, 1.9235999789E-3f,2.0687500946E-3f, 2.0898699295E-3f, 2.0687500946E-3f,1.9235999789E-3f, 1.5450799838E-3f, 8.8387000142E-4f,-3.7829999201E-5f, -6.2596000498E-4f, -4.0483998600E-4f,
    -6.2596000498E-4f, -3.2734998967E-4f, 7.7435001731E-4f,1.5874400269E-3f, 2.1750701126E-3f, 2.5626500137E-3f,2.2892199922E-3f, 1.9755100366E-3f, 2.2892199922E-3f,2.5626500137E-3f, 2.1750701126E-3f, 1.5874400269E-3f,7.7435001731E-4f, -3.2734998967E-4f, -6.2596000498E-4f,
    -3.7829999201E-5f, 7.7435001731E-4f, 1.1793200392E-3f,1.4050999889E-3f, 2.2253401112E-3f, 2.1145299543E-3f,3.3578000148E-4f, -8.3368999185E-4f, 3.3578000148E-4f,2.1145299543E-3f, 2.2253401112E-3f, 1.4050999889E-3f,1.1793200392E-3f, 7.7435001731E-4f, -3.7829999201E-5f,
    8.8387000142E-4f, 1.5874400269E-3f, 1.4050999889E-3f,1.2960999738E-3f, -4.9274001503E-4f, -3.1295299996E-3f,-4.5751798898E-3f, -5.1014497876E-3f, -4.5751798898E-3f,-3.1295299996E-3f, -4.9274001503E-4f, 1.2960999738E-3f,1.4050999889E-3f, 1.5874400269E-3f, 8.8387000142E-4f,
    1.5450799838E-3f, 2.1750701126E-3f, 2.2253401112E-3f,-4.9274001503E-4f, -6.3222697936E-3f, -2.7556000277E-3f,5.3632198833E-3f, 7.3032598011E-3f, 5.3632198833E-3f,-2.7556000277E-3f, -6.3222697936E-3f, -4.9274001503E-4f,2.2253401112E-3f, 2.1750701126E-3f, 1.5450799838E-3f,
    1.9235999789E-3f, 2.5626500137E-3f, 2.1145299543E-3f,-3.1295299996E-3f, -2.7556000277E-3f, 1.3962360099E-2f,7.8046298586E-3f, -9.3812197447E-3f, 7.8046298586E-3f,1.3962360099E-2f, -2.7556000277E-3f, -3.1295299996E-3f,2.1145299543E-3f, 2.5626500137E-3f, 1.9235999789E-3f,
    2.0687500946E-3f, 2.2892199922E-3f, 3.3578000148E-4f,-4.5751798898E-3f, 5.3632198833E-3f, 7.8046298586E-3f,-7.9501636326E-2f, -0.1554141641f, -7.9501636326E-2f,7.8046298586E-3f, 5.3632198833E-3f, -4.5751798898E-3f,3.3578000148E-4f, 2.2892199922E-3f, 2.0687500946E-3f,
    2.0898699295E-3f, 1.9755100366E-3f, -8.3368999185E-4f,-5.1014497876E-3f, 7.3032598011E-3f, -9.3812197447E-3f,-0.1554141641f, 0.7303866148f, -0.1554141641f,-9.3812197447E-3f, 7.3032598011E-3f, -5.1014497876E-3f,-8.3368999185E-4f, 1.9755100366E-3f, 2.0898699295E-3f,
    2.0687500946E-3f, 2.2892199922E-3f, 3.3578000148E-4f,-4.5751798898E-3f, 5.3632198833E-3f, 7.8046298586E-3f,-7.9501636326E-2f, -0.1554141641f, -7.9501636326E-2f,7.8046298586E-3f, 5.3632198833E-3f, -4.5751798898E-3f,3.3578000148E-4f, 2.2892199922E-3f, 2.0687500946E-3f,
    1.9235999789E-3f, 2.5626500137E-3f, 2.1145299543E-3f,-3.1295299996E-3f, -2.7556000277E-3f, 1.3962360099E-2f,7.8046298586E-3f, -9.3812197447E-3f, 7.8046298586E-3f,1.3962360099E-2f, -2.7556000277E-3f, -3.1295299996E-3f,2.1145299543E-3f, 2.5626500137E-3f, 1.9235999789E-3f,
    1.5450799838E-3f, 2.1750701126E-3f, 2.2253401112E-3f,-4.9274001503E-4f, -6.3222697936E-3f, -2.7556000277E-3f,5.3632198833E-3f, 7.3032598011E-3f, 5.3632198833E-3f,-2.7556000277E-3f, -6.3222697936E-3f, -4.9274001503E-4f,2.2253401112E-3f, 2.1750701126E-3f, 1.5450799838E-3f,
    8.8387000142E-4f, 1.5874400269E-3f, 1.4050999889E-3f,1.2960999738E-3f, -4.9274001503E-4f, -3.1295299996E-3f,-4.5751798898E-3f, -5.1014497876E-3f, -4.5751798898E-3f,-3.1295299996E-3f, -4.9274001503E-4f, 1.2960999738E-3f,1.4050999889E-3f, 1.5874400269E-3f, 8.8387000142E-4f,
    -3.7829999201E-5f, 7.7435001731E-4f, 1.1793200392E-3f,1.4050999889E-3f, 2.2253401112E-3f, 2.1145299543E-3f,3.3578000148E-4f, -8.3368999185E-4f, 3.3578000148E-4f,2.1145299543E-3f, 2.2253401112E-3f, 1.4050999889E-3f,1.1793200392E-3f, 7.7435001731E-4f, -3.7829999201E-5f,
    -6.2596000498E-4f, -3.2734998967E-4f, 7.7435001731E-4f,1.5874400269E-3f, 2.1750701126E-3f, 2.5626500137E-3f,2.2892199922E-3f, 1.9755100366E-3f, 2.2892199922E-3f,2.5626500137E-3f, 2.1750701126E-3f, 1.5874400269E-3f,7.7435001731E-4f, -3.2734998967E-4f, -6.2596000498E-4f,
    -4.0483998600E-4f, -6.2596000498E-4f, -3.7829999201E-5f,8.8387000142E-4f, 1.5450799838E-3f, 1.9235999789E-3f,2.0687500946E-3f, 2.0898699295E-3f, 2.0687500946E-3f,1.9235999789E-3f, 1.5450799838E-3f, 8.8387000142E-4f,-3.7829999201E-5f, -6.2596000498E-4f, -4.0483998600E-4f};

    private static float[] b0_4 =
        {-8.1125000725E-4f, 4.4451598078E-3f, 1.2316980399E-2f,1.3955879956E-2f,  1.4179450460E-2f, 1.3955879956E-2f,1.2316980399E-2f, 4.4451598078E-3f, -8.1125000725E-4f,
    3.9103501476E-3f, 4.4565401040E-3f, -5.8724298142E-3f,-2.8760801069E-3f, 8.5267601535E-3f, -2.8760801069E-3f,-5.8724298142E-3f, 4.4565401040E-3f, 3.9103501476E-3f,
    1.3462699717E-3f, -3.7740699481E-3f, 8.2581602037E-3f,3.9442278445E-2f, 5.3605638444E-2f, 3.9442278445E-2f,8.2581602037E-3f, -3.7740699481E-3f, 1.3462699717E-3f,
    7.4700999539E-4f, -3.6522001028E-4f, -2.2522680461E-2f,-0.1105690673f, -0.1768419296f, -0.1105690673f,-2.2522680461E-2f, -3.6522001028E-4f, 7.4700999539E-4f,
    0.0000000000f, 0.0000000000f, 0.0000000000f,0.0000000000f, 0.0000000000f, 0.0000000000f,0.0000000000f, 0.0000000000f, 0.0000000000f,
    -7.4700999539E-4f, 3.6522001028E-4f, 2.2522680461E-2f,0.1105690673f, 0.1768419296f, 0.1105690673f,2.2522680461E-2f, 3.6522001028E-4f, -7.4700999539E-4f,
    -1.3462699717E-3f, 3.7740699481E-3f, -8.2581602037E-3f,-3.9442278445E-2f, -5.3605638444E-2f, -3.9442278445E-2f,-8.2581602037E-3f, 3.7740699481E-3f, -1.3462699717E-3f,
    -3.9103501476E-3f, -4.4565401040E-3f, 5.8724298142E-3f,2.8760801069E-3f, -8.5267601535E-3f, 2.8760801069E-3f,5.8724298142E-3f, -4.4565401040E-3f, -3.9103501476E-3f,
    8.1125000725E-4f, -4.4451598078E-3f, -1.2316980399E-2f,-1.3955879956E-2f, -1.4179450460E-2f, -1.3955879956E-2f,-1.2316980399E-2f, -4.4451598078E-3f, 8.1125000725E-4f};

    private static float[] b1_4 =
        {0.0000000000f, -8.2846998703E-4f, -5.7109999034E-5f,4.0110000555E-5f, 4.6670897864E-3f, 8.0871898681E-3f,1.4807609841E-2f, 8.6204400286E-3f, -3.1221499667E-3f,
    8.2846998703E-4f, 0.0000000000f, -9.7479997203E-4f,-6.9718998857E-3f, -2.0865600090E-3f, 2.3298799060E-3f,-4.4814897701E-3f, 1.4917500317E-2f, 8.6204400286E-3f,
    5.7109999034E-5f, 9.7479997203E-4f, 0.0000000000f,-1.2145539746E-2f, -2.4427289143E-2f, 5.0797060132E-2f,3.2785870135E-2f, -4.4814897701E-3f, 1.4807609841E-2f,
    -4.0110000555E-5f, 6.9718998857E-3f, 1.2145539746E-2f,0.0000000000f, -0.1510555595f, -8.2495503128E-2f,5.0797060132E-2f, 2.3298799060E-3f, 8.0871898681E-3f,
    -4.6670897864E-3f, 2.0865600090E-3f, 2.4427289143E-2f,0.1510555595f, 0.0000000000f, -0.1510555595f,-2.4427289143E-2f, -2.0865600090E-3f, 4.6670897864E-3f,
    -8.0871898681E-3f, -2.3298799060E-3f, -5.0797060132E-2f,8.2495503128E-2f, 0.1510555595f, 0.0000000000f,-1.2145539746E-2f, -6.9718998857E-3f, 4.0110000555E-5f,
    -1.4807609841E-2f, 4.4814897701E-3f, -3.2785870135E-2f,-5.0797060132E-2f, 2.4427289143E-2f, 1.2145539746E-2f,0.0000000000f, -9.7479997203E-4f, -5.7109999034E-5f,
    -8.6204400286E-3f, -1.4917500317E-2f, 4.4814897701E-3f,-2.3298799060E-3f, 2.0865600090E-3f, 6.9718998857E-3f,9.7479997203E-4f, 0.0000000000f, -8.2846998703E-4f,
    3.1221499667E-3f, -8.6204400286E-3f, -1.4807609841E-2f,-8.0871898681E-3f, -4.6670897864E-3f, -4.0110000555E-5f,5.7109999034E-5f, 8.2846998703E-4f, 0.0000000000f};

    private static float[] b2_4 =
        {8.1125000725E-4f, -3.9103501476E-3f, -1.3462699717E-3f,-7.4700999539E-4f, 0.0000000000f, 7.4700999539E-4f,1.3462699717E-3f, 3.9103501476E-3f, -8.1125000725E-4f,
    -4.4451598078E-3f, -4.4565401040E-3f, 3.7740699481E-3f,3.6522001028E-4f, 0.0000000000f, -3.6522001028E-4f,-3.7740699481E-3f, 4.4565401040E-3f, 4.4451598078E-3f,
    -1.2316980399E-2f, 5.8724298142E-3f, -8.2581602037E-3f,2.2522680461E-2f, 0.0000000000f, -2.2522680461E-2f,8.2581602037E-3f, -5.8724298142E-3f, 1.2316980399E-2f,
    -1.3955879956E-2f, 2.8760801069E-3f, -3.9442278445E-2f,0.1105690673f, 0.0000000000f, -0.1105690673f,3.9442278445E-2f, -2.8760801069E-3f, 1.3955879956E-2f,
    -1.4179450460E-2f, -8.5267601535E-3f, -5.3605638444E-2f,0.1768419296f, 0.0000000000f, -0.1768419296f,5.3605638444E-2f, 8.5267601535E-3f, 1.4179450460E-2f,
    -1.3955879956E-2f, 2.8760801069E-3f, -3.9442278445E-2f,0.1105690673f, 0.0000000000f, -0.1105690673f,3.9442278445E-2f, -2.8760801069E-3f, 1.3955879956E-2f,
    -1.2316980399E-2f, 5.8724298142E-3f, -8.2581602037E-3f,2.2522680461E-2f, 0.0000000000f, -2.2522680461E-2f,8.2581602037E-3f, -5.8724298142E-3f, 1.2316980399E-2f,
    -4.4451598078E-3f, -4.4565401040E-3f, 3.7740699481E-3f,3.6522001028E-4f, 0.0000000000f, -3.6522001028E-4f,-3.7740699481E-3f, 4.4565401040E-3f, 4.4451598078E-3f,
    8.1125000725E-4f, -3.9103501476E-3f, -1.3462699717E-3f,-7.4700999539E-4f, 0.0000000000f, 7.4700999539E-4f,1.3462699717E-3f, 3.9103501476E-3f, -8.1125000725E-4f};

    private static float[] b3_4 =
       {3.1221499667E-3f, -8.6204400286E-3f, -1.4807609841E-2f,-8.0871898681E-3f, -4.6670897864E-3f, -4.0110000555E-5f,5.7109999034E-5f, 8.2846998703E-4f, 0.0000000000f,
    -8.6204400286E-3f, -1.4917500317E-2f, 4.4814897701E-3f,-2.3298799060E-3f, 2.0865600090E-3f, 6.9718998857E-3f,9.7479997203E-4f, -0.0000000000f, -8.2846998703E-4f,
    -1.4807609841E-2f, 4.4814897701E-3f, -3.2785870135E-2f,-5.0797060132E-2f, 2.4427289143E-2f, 1.2145539746E-2f,0.0000000000f, -9.7479997203E-4f, -5.7109999034E-5f,
    -8.0871898681E-3f, -2.3298799060E-3f, -5.0797060132E-2f,8.2495503128E-2f, 0.1510555595f, -0.0000000000f,-1.2145539746E-2f, -6.9718998857E-3f, 4.0110000555E-5f,
    -4.6670897864E-3f, 2.0865600090E-3f, 2.4427289143E-2f,0.1510555595f, 0.0000000000f, -0.1510555595f,-2.4427289143E-2f, -2.0865600090E-3f, 4.6670897864E-3f,
    -4.0110000555E-5f, 6.9718998857E-3f, 1.2145539746E-2f,0.0000000000f, -0.1510555595f, -8.2495503128E-2f,5.0797060132E-2f, 2.3298799060E-3f, 8.0871898681E-3f,
    5.7109999034E-5f, 9.7479997203E-4f, -0.0000000000f,-1.2145539746E-2f, -2.4427289143E-2f, 5.0797060132E-2f,3.2785870135E-2f, -4.4814897701E-3f, 1.4807609841E-2f,
    8.2846998703E-4f, -0.0000000000f, -9.7479997203E-4f,-6.9718998857E-3f, -2.0865600090E-3f, 2.3298799060E-3f,-4.4814897701E-3f, 1.4917500317E-2f, 8.6204400286E-3f,
    0.0000000000f, -8.2846998703E-4f, -5.7109999034E-5f,4.0110000555E-5f, 4.6670897864E-3f, 8.0871898681E-3f,1.4807609841E-2f, 8.6204400286E-3f, -3.1221499667E-3f};


    private static float[][] fourFilters = { hi_4, lo_4, b0_4, b1_4,b2_4,b3_4 };
    private static int[] fourFilterSizes = { 15,9, 9, 9, 9, 9 };

    #region filters_unused
    private static float[] lPass = {-4.350000e-05f, 1.207800e-04f, -6.771400e-04f, -1.243400e-04f,-8.006400e-04f, -1.597040e-03f, -2.516800e-04f, -4.202000e-04f,1.262000e-03f, -4.202000e-04f, -2.516800e-04f, -1.597040e-03f,-8.006400e-04f, -1.243400e-04f, -6.771400e-04f, 1.207800e-04f,-4.350000e-05f,
                                    1.207800e-04f, 4.460600e-04f, -5.814600e-04f, 5.621600e-04f,-1.368800e-04f, 2.325540e-03f, 2.889860e-03f, 4.287280e-03f,5.589400e-03f, 4.287280e-03f, 2.889860e-03f, 2.325540e-03f,-1.368800e-04f, 5.621600e-04f, -5.814600e-04f, 4.460600e-04f,1.207800e-04f,
                                    -6.771400e-04f, -5.814600e-04f, 1.460780e-03f, 2.160540e-03f,3.761360e-03f, 3.080980e-03f, 4.112200e-03f, 2.221220e-03f,5.538200e-04f, 2.221220e-03f, 4.112200e-03f, 3.080980e-03f,3.761360e-03f, 2.160540e-03f, 1.460780e-03f, -5.814600e-04f,-6.771400e-04f,
                                    -1.243400e-04f, 5.621600e-04f, 2.160540e-03f, 3.175780e-03f,3.184680e-03f, -1.777480e-03f, -7.431700e-03f, -9.056920e-03f,-9.637220e-03f, -9.056920e-03f, -7.431700e-03f, -1.777480e-03f,3.184680e-03f, 3.175780e-03f, 2.160540e-03f, 5.621600e-04f,-1.243400e-04f,
                                    -8.006400e-04f, -1.368800e-04f, 3.761360e-03f, 3.184680e-03f,-3.530640e-03f, -1.260420e-02f, -1.884744e-02f, -1.750818e-02f,-1.648568e-02f, -1.750818e-02f, -1.884744e-02f, -1.260420e-02f,-3.530640e-03f, 3.184680e-03f, 3.761360e-03f, -1.368800e-04f,-8.006400e-04f,
                                    -1.597040e-03f, 2.325540e-03f, 3.080980e-03f, -1.777480e-03f,-1.260420e-02f, -2.022938e-02f, -1.109170e-02f, 3.955660e-03f,1.438512e-02f, 3.955660e-03f, -1.109170e-02f, -2.022938e-02f,-1.260420e-02f, -1.777480e-03f, 3.080980e-03f, 2.325540e-03f,-1.597040e-03f,
                                    -2.516800e-04f, 2.889860e-03f, 4.112200e-03f, -7.431700e-03f,-1.884744e-02f, -1.109170e-02f, 2.190660e-02f, 6.806584e-02f,9.058014e-02f, 6.806584e-02f, 2.190660e-02f, -1.109170e-02f,-1.884744e-02f, -7.431700e-03f, 4.112200e-03f, 2.889860e-03f,-2.516800e-04f,
                                    -4.202000e-04f, 4.287280e-03f, 2.221220e-03f, -9.056920e-03f,-1.750818e-02f, 3.955660e-03f, 6.806584e-02f, 1.445500e-01f,1.773651e-01f, 1.445500e-01f, 6.806584e-02f, 3.955660e-03f,-1.750818e-02f, -9.056920e-03f, 2.221220e-03f, 4.287280e-03f,-4.202000e-04f,
                                    1.262000e-03f, 5.589400e-03f, 5.538200e-04f, -9.637220e-03f,-1.648568e-02f, 1.438512e-02f, 9.058014e-02f, 1.773651e-01f,2.120374e-01f, 1.773651e-01f, 9.058014e-02f, 1.438512e-02f,-1.648568e-02f, -9.637220e-03f, 5.538200e-04f, 5.589400e-03f,1.262000e-03f,
                                    -4.202000e-04f, 4.287280e-03f, 2.221220e-03f, -9.056920e-03f,-1.750818e-02f, 3.955660e-03f, 6.806584e-02f, 1.445500e-01f,1.773651e-01f, 1.445500e-01f, 6.806584e-02f, 3.955660e-03f,-1.750818e-02f, -9.056920e-03f, 2.221220e-03f, 4.287280e-03f,-4.202000e-04f,
                                    -2.516800e-04f, 2.889860e-03f, 4.112200e-03f, -7.431700e-03f,-1.884744e-02f, -1.109170e-02f, 2.190660e-02f, 6.806584e-02f,9.058014e-02f, 6.806584e-02f, 2.190660e-02f, -1.109170e-02f,-1.884744e-02f, -7.431700e-03f, 4.112200e-03f, 2.889860e-03f,-2.516800e-04f,
                                    -1.597040e-03f, 2.325540e-03f, 3.080980e-03f, -1.777480e-03f,-1.260420e-02f, -2.022938e-02f, -1.109170e-02f, 3.955660e-03f,1.438512e-02f, 3.955660e-03f, -1.109170e-02f, -2.022938e-02f,-1.260420e-02f, -1.777480e-03f, 3.080980e-03f, 2.325540e-03f,-1.597040e-03f,
                                    -8.006400e-04f, -1.368800e-04f, 3.761360e-03f, 3.184680e-03f,-3.530640e-03f, -1.260420e-02f, -1.884744e-02f, -1.750818e-02f,-1.648568e-02f, -1.750818e-02f, -1.884744e-02f, -1.260420e-02f,-3.530640e-03f, 3.184680e-03f, 3.761360e-03f, -1.368800e-04f,-8.006400e-04f,
                                    -1.243400e-04f, 5.621600e-04f, 2.160540e-03f, 3.175780e-03f,3.184680e-03f, -1.777480e-03f, -7.431700e-03f, -9.056920e-03f,-9.637220e-03f, -9.056920e-03f, -7.431700e-03f, -1.777480e-03f,3.184680e-03f, 3.175780e-03f, 2.160540e-03f, 5.621600e-04f,-1.243400e-04f,
                                    -6.771400e-04f, -5.814600e-04f, 1.460780e-03f, 2.160540e-03f,3.761360e-03f, 3.080980e-03f, 4.112200e-03f, 2.221220e-03f,5.538200e-04f, 2.221220e-03f, 4.112200e-03f, 3.080980e-03f,3.761360e-03f, 2.160540e-03f, 1.460780e-03f, -5.814600e-04f,-6.771400e-04f,
                                    1.207800e-04f, 4.460600e-04f, -5.814600e-04f, 5.621600e-04f,-1.368800e-04f, 2.325540e-03f, 2.889860e-03f, 4.287280e-03f,5.589400e-03f, 4.287280e-03f, 2.889860e-03f, 2.325540e-03f,-1.368800e-04f, 5.621600e-04f, -5.814600e-04f, 4.460600e-04f,1.207800e-04f,
                                    -4.350000e-05f, 1.207800e-04f, -6.771400e-04f, -1.243400e-04f,-8.006400e-04f, -1.597040e-03f, -2.516800e-04f, -4.202000e-04f,1.262000e-03f, -4.202000e-04f, -2.516800e-04f, -1.597040e-03f,-8.006400e-04f, -1.243400e-04f, -6.771400e-04f, 1.207800e-04f,-4.350000e-05f};


    private static int lPassWidth = 17;


    private static float[] b0_ = {-0.0312931314f, -0.0241302662f,  0.0000000000f,  0.0241302662f,0.0312931314f,
                                -0.0706121027f,  0.1662607789f,  0.0000000000f, -0.1662607789f,0.0706121027f,
                                -0.0272721779f,  0.3935869336f,  0.0000000000f, -0.3935869336f,0.0272721779f,
                                -0.0706121027f,  0.1662607789f,  0.0000000000f, -0.1662607789f,0.0706121027f,
                                -0.0312931314f, -0.0241302662f,  0.0000000000f,  0.0241302662f,0.0312931314f
                                };

    private static int b0Width_ = 5;

    private static float[] b1_ = {0.0312931277f,  0.0706120878f,  0.0272721741f,  0.0706120878f,0.0312931277f,
                                    0.0241302624f, -0.1662607491f, -0.3935868740f, -0.1662607491f,0.0241302624f,
                                    0.0000000000f,  0.0000000000f,  0.0000000000f,  0.0000000000f,0.0000000000f,
                                    -0.0241302624f,  0.1662607491f,  0.3935868740f,  0.1662607491f,-0.0241302624f,
                                    -0.0312931277f, -0.0706120878f, -0.0272721741f, -0.0706120878f,-0.0312931277f };

    private static int b1Width_ = 5;
    #endregion

    public static RenderTexture GaussianPyramid(Texture2D baseTex, int depth)
    {

        int size = baseTex.width;
        int LodCount = (int)Mathf.Floor(Mathf.Log(size, 2f));
        LodCount = Mathf.Min(LodCount, depth);
        RenderTexture res = new RenderTexture(size, size, 0, RenderTextureFormat.ARGBHalf, RenderTextureReadWrite.Linear);
        res.filterMode = FilterMode.Trilinear;
        res.useMipMap = true;
        res.autoGenerateMips = false;
        res.Create();
        res.hideFlags = HideFlags.HideAndDontSave;

        Shader gaussShader = Shader.Find("Hidden/Gaussian Pyramid");
        Material gaussMaterial = new Material(gaussShader);

        //First level is copy
        Graphics.CopyTexture(baseTex, 0, 0, res, 0, 0);
        //Gaussian Pyramid Generation
        for (int i = 0; i < (LodCount << 1); i += 2)
        {
            int lod = i >> 1;

            size >>= 1;

            if (size == 0)
                size = 1;

            RenderTexture t1 = RenderTexture.GetTemporary(size, size, 0, RenderTextureFormat.ARGBHalf, RenderTextureReadWrite.Linear);
            RenderTexture t2 = RenderTexture.GetTemporary(size, size, 0, RenderTextureFormat.ARGBHalf, RenderTextureReadWrite.Linear);

            gaussMaterial.SetVector("_Spread", Vector2.one);
            gaussMaterial.SetVector("_TexelSize", Vector2.one / (float)(size - 1));
            gaussMaterial.SetFloat("_LOD", (float)lod);
            gaussMaterial.SetVector("_Direction", Vector2.right);

            Graphics.Blit(res, t1, gaussMaterial);

            gaussMaterial.SetVector("_Direction", Vector2.down);

            Graphics.Blit(t1, t2, gaussMaterial);

            Graphics.CopyTexture(t2, 0, 0, res, 0, lod + 1);

            RenderTexture.ReleaseTemporary(t1);
            RenderTexture.ReleaseTemporary(t2);
        }

        return res;
    }

    public static RenderTexture LaplacianPyramid(Texture2D baseTex, bool useLAB, bool preFilter, int depth, float foveaSize, float meanDepth, float foveaX = 0.5f, float foveaY = 0.5f)
    {

        RenderTexture GaussianPyramid = PyramidUtils.GaussianPyramid(baseTex, depth);

        int size = baseTex.width;
        int LodCount = (int)Mathf.Floor(Mathf.Log(size, 2f));
        LodCount = Mathf.Min(LodCount, depth);

        RenderTexture res = new RenderTexture(size, size, 0, RenderTextureFormat.ARGBHalf, RenderTextureReadWrite.Linear);
        res.filterMode = FilterMode.Trilinear;
        res.useMipMap = true;
        res.autoGenerateMips = false;
        res.Create();
        res.hideFlags = HideFlags.HideAndDontSave;

        Shader lapShader = Shader.Find("Hidden/Laplacian Pyramid");
        Material lapMaterial = new Material(lapShader);

        //Necessary if we are filtering
        Shader squareShader = Shader.Find("Hidden/SquarePixel");
        Material squareMaterial = new Material(squareShader);
        Shader passShader = Shader.Find("Hidden/Passthrough");
        Material passMaterial = new Material(passShader);
        Shader preFilterShader = Shader.Find("Hidden/PreFilter");
        Material preFilterMaterial = new Material(preFilterShader);

        //First level is copy
        Graphics.CopyTexture(GaussianPyramid, 0, LodCount, res, 0, LodCount);
        //Gaussian Pyramid Generation
        int s = size >> depth;
        for (int i = LodCount - 1; i >= 0; i--)
        {
            s <<= 1;
            RenderTextureDescriptor noMips = new RenderTextureDescriptor(s, s, RenderTextureFormat.ARGBHalf, 0);
            noMips.autoGenerateMips = false;
            noMips.useMipMap = false;

            RenderTextureDescriptor withMips = new RenderTextureDescriptor(s, s, RenderTextureFormat.ARGBHalf, 0);
            withMips.autoGenerateMips = true;
            withMips.useMipMap = true;


            lapMaterial.SetInt("_LAB", 0);
            lapMaterial.SetFloat("_LOD", (float)i);
            RenderTexture laplacianLevel = new RenderTexture(withMips);
            Graphics.Blit(GaussianPyramid, laplacianLevel, lapMaterial);
            //Pre filter means we subtract mean and divide by variance, so synthesis is easier. 
            if (preFilter)
            {
                ///////STD is Mean(I^2) - Mean(I)^2///////
                // Calculating square
                //Lod is 0 because we are using the rendered texture as input
                squareMaterial.SetFloat("_LOD", 0);
                RenderTexture squareInput = new RenderTexture(withMips);
                Graphics.Blit(laplacianLevel, squareInput, squareMaterial);

                preFilterMaterial.SetTexture("_SquareTex", squareInput);

                preFilterMaterial.SetFloat("_FoveaSize", foveaSize);
                preFilterMaterial.SetFloat("_FoveaX", foveaX);
                preFilterMaterial.SetFloat("_FoveaY", foveaY);
                preFilterMaterial.SetFloat("_MeanDepth", meanDepth);

                RenderTexture filtered = new RenderTexture(noMips);

                Graphics.Blit(laplacianLevel, filtered, preFilterMaterial);

                Graphics.CopyTexture(filtered, 0, 0, res, 0, i);
                //squareInput.Release();
                //levelMips.Release();
                //filtered.Release();
                //t1.Release();
            }
            else
            {
                Graphics.CopyTexture(laplacianLevel, 0, 0, res, 0, i);
                //laplacianLevel.Release();
            }

        }

        return res;
    }

    public static RenderTexture[] SteerablePyramidQuadTex(Texture2D baseTex, int depth, int nbands, float foveaSize, float meanDepth, bool hiq, bool preFilter, bool combinedMatrix, float foveaX = 0.5f, float foveaY = 0.5f)
    {
        int width = baseTex.width;
        int height = baseTex.height;

        RenderTexture[] resArray = new RenderTexture[1 + nbands];
        for (int i = 0; i < 1 + nbands; i++)
        {
            resArray[i] = new RenderTexture(width, height, 0, RenderTextureFormat.ARGBHalf, RenderTextureReadWrite.Linear);
            resArray[i].filterMode = FilterMode.Trilinear;
            resArray[i].wrapMode = TextureWrapMode.Clamp;
            resArray[i].useMipMap = true;
            resArray[i].autoGenerateMips = false;
            resArray[i].isPowerOfTwo = false;
            resArray[i].Create();
            resArray[i].hideFlags = HideFlags.HideAndDontSave;
        }

        Shader convoShader = Shader.Find("Hidden/Convolution2D");
        Material convoMaterial = new Material(convoShader);

        Shader squareShader = Shader.Find("Hidden/SquarePixel");
        Material squareMaterial = new Material(squareShader);
        Shader preFilterShader = Shader.Find("Hidden/PreFilter");
        Material preFilterMaterial = new Material(preFilterShader);

        RenderTextureDescriptor withMips = new RenderTextureDescriptor(width, height, RenderTextureFormat.ARGBHalf, 0);
        withMips.autoGenerateMips = true;
        withMips.useMipMap = true;
        withMips.sRGB = false;

        RenderTextureDescriptor noMips = new RenderTextureDescriptor(width, height, RenderTextureFormat.ARGBHalf, 0);
        noMips.autoGenerateMips = false;
        noMips.useMipMap = false;
        noMips.sRGB = false;


        convoMaterial.SetFloatArray("_Kernel", PyramidUtils.getFilter(0, true, false, 4));
        convoMaterial.SetInt("_KernelWidth", PyramidUtils.getFilterWidth(0, true, false, 4));

        /////////DOING LOW PASS //////////
        RenderTexture loPass = new RenderTexture(withMips);
        convoMaterial.SetFloat("_LOD", (float)0);
        convoMaterial.SetVector("_TexelSize", new Vector2(1 / (float)(width - 1),1/(float)(height-1)));
        convoMaterial.SetFloatArray("_Kernel", getFilter(1, hiq, combinedMatrix));
        convoMaterial.SetInt("_KernelWidth", getFilterWidth(1, hiq, combinedMatrix));
        convoMaterial.SetFloat("_K", 1);
        Graphics.Blit(baseTex, loPass, convoMaterial);
        

        /////////DOING HI PASS //////////

        RenderTexture hiPass = new RenderTexture(withMips);
        RenderTexture hiPass2 = new RenderTexture(withMips);
        convoMaterial.SetFloat("_LOD", (float)0);
        convoMaterial.SetVector("_TexelSize", new Vector2(1 / (float)(width - 1), 1 / (float)(height - 1)));
        convoMaterial.SetFloatArray("_Kernel", getFilter(0, hiq, combinedMatrix));
        convoMaterial.SetInt("_KernelWidth", getFilterWidth(0, hiq, combinedMatrix));
        convoMaterial.SetFloat("_K", 1);

        if (preFilter)
        {
            Graphics.Blit(baseTex, hiPass2, convoMaterial);
            Graphics.Blit(hiPass2, hiPass, convoMaterial);
        }
        else
        {
            Graphics.Blit(baseTex, hiPass, convoMaterial);
        }


        //////////PRE FILTER//////////
        squareMaterial.SetFloat("_LOD", 0);
        RenderTexture squareInput = new RenderTexture(withMips);
        Graphics.Blit(hiPass, squareInput, squareMaterial);
        preFilterMaterial.SetTexture("_SquareTex", squareInput);
        preFilterMaterial.SetFloat("_FoveaSize", foveaSize);
        preFilterMaterial.SetFloat("_FoveaX", foveaX);
        preFilterMaterial.SetFloat("_FoveaY", foveaY);
        preFilterMaterial.SetFloat("_MeanDepth", meanDepth);

        Graphics.SetRenderTarget(resArray[0], 0);
        Graphics.Blit(hiPass, preFilterMaterial);
        //////////////////////////////
        hiPass.Release();
        hiPass2.Release();

     
        for (int i = depth - 1; i >= 0; i--)
        {
            int w = Mathf.CeilToInt(width / Mathf.Pow(2, i));
            int h = Mathf.CeilToInt(height / Mathf.Pow(2, i));

            noMips = new RenderTextureDescriptor(w, h, RenderTextureFormat.ARGBHalf, 0);
            noMips.autoGenerateMips = false;
            noMips.useMipMap = false;
            noMips.sRGB = false;

            withMips = new RenderTextureDescriptor(w, h, RenderTextureFormat.ARGBHalf, 0);
            withMips.autoGenerateMips = true;
            withMips.useMipMap = true;
            withMips.sRGB = false;

            convoMaterial.SetFloat("_LOD", (float)i);
            convoMaterial.SetVector("_TexelSize", new Vector2(1/ (float)(w - 1),1/(float)(h-1)));

            squareMaterial.SetFloat("_LOD", 0);
            preFilterMaterial.SetFloat("_FoveaSize", foveaSize);
            preFilterMaterial.SetFloat("_FoveaX", foveaX);
            preFilterMaterial.SetFloat("_FoveaY", foveaY);
            preFilterMaterial.SetFloat("_MeanDepth", meanDepth);

            for (int j = 0; j < nbands; j++)
            {
                convoMaterial.SetFloatArray("_Kernel", getFilter(2 + j, hiq, combinedMatrix, nbands));
                convoMaterial.SetInt("_KernelWidth", getFilterWidth(2 + j, hiq, combinedMatrix, nbands));

                RenderTexture b0 = new RenderTexture(withMips);
                convoMaterial.SetFloat("_K", 1);

                if (preFilter)
                {
                    RenderTexture b02 = new RenderTexture(noMips);
                    Graphics.Blit(loPass, b02, convoMaterial);
                    convoMaterial.SetFloat("_K", -1);
                    Graphics.Blit(b02, b0, convoMaterial);
                    b02.Release();
                }
                else
                {
                    Graphics.Blit(loPass, b0, convoMaterial);
                }

                squareInput = new RenderTexture(withMips);

                Graphics.Blit(b0, squareInput, squareMaterial);
                preFilterMaterial.SetTexture("_SquareTex", squareInput);
                Graphics.SetRenderTarget(resArray[1 + j], i);
                Graphics.Blit(b0, preFilterMaterial);
                b0.Release();
                squareInput.Release();
            }


        }
        int wi = Mathf.CeilToInt(width / Mathf.Pow(2, depth));
        int hi = Mathf.CeilToInt(height / Mathf.Pow(2, depth));

        noMips = new RenderTextureDescriptor(wi, hi, RenderTextureFormat.ARGBHalf, 0);
        noMips.autoGenerateMips = false;
        noMips.useMipMap = false;
        noMips.sRGB = false;

        withMips = new RenderTextureDescriptor(wi, hi, RenderTextureFormat.ARGBHalf, 0);
        withMips.autoGenerateMips = true;
        withMips.useMipMap = true;
        withMips.sRGB = false;
        //////////PRE FILTER LOWPASS AFTER USED//////////
        squareMaterial.SetFloat("_LOD", depth);
        squareInput = new RenderTexture(withMips);
        Graphics.Blit(loPass, squareInput, squareMaterial);
        preFilterMaterial.SetTexture("_SquareTex", squareInput);
        preFilterMaterial.SetFloat("_FoveaSize", foveaSize);
        preFilterMaterial.SetFloat("_FoveaX", foveaX);
        preFilterMaterial.SetFloat("_FoveaY", foveaY);
        preFilterMaterial.SetFloat("_MeanDepth", meanDepth);

        Graphics.SetRenderTarget(resArray[0], depth);
        Graphics.Blit(loPass, preFilterMaterial);
        //////////////////////////////

        squareInput.Release();
        loPass.Release();
        return resArray;
    }

    public static RenderTexture[] SteerablePyramid(Texture2D baseTex, int depth, int nbands, float foveaSize, float meanDepth, bool hiq, bool preFilter, bool combinedMatrix, float foveaX = 0.5f, float foveaY = 0.5f)
    {
        int size = baseTex.width;
        int LodCount = (int)Mathf.Floor(Mathf.Log(size, 2f));
        LodCount = Mathf.Min(LodCount, depth);

        RenderTexture[] resArray = new RenderTexture[1 + nbands];
        for (int i = 0; i < 1 + nbands; i++)
        {
            resArray[i] = new RenderTexture(size, size, 0, RenderTextureFormat.ARGBHalf, RenderTextureReadWrite.Linear);
            resArray[i].filterMode = FilterMode.Trilinear;
            resArray[i].wrapMode = TextureWrapMode.Mirror;
            resArray[i].useMipMap = true;
            resArray[i].autoGenerateMips = false;
            resArray[i].Create();
            resArray[i].hideFlags = HideFlags.HideAndDontSave;
        }

        Shader convoShader = Shader.Find("Hidden/Convolution2D");
        Material convoMaterial = new Material(convoShader);

        Shader squareShader = Shader.Find("Hidden/SquarePixel");
        Material squareMaterial = new Material(squareShader);
        Shader preFilterShader = Shader.Find("Hidden/PreFilter");
        Material preFilterMaterial = new Material(preFilterShader);

        RenderTextureDescriptor withMips = new RenderTextureDescriptor(size, size, RenderTextureFormat.ARGBHalf, 0);
        withMips.autoGenerateMips = true;
        withMips.useMipMap = true;
        withMips.sRGB = false;

        RenderTextureDescriptor noMips = new RenderTextureDescriptor(size, size, RenderTextureFormat.ARGBHalf, 0);
        noMips.autoGenerateMips = false;
        noMips.useMipMap = false;
        noMips.sRGB = false;


        convoMaterial.SetFloatArray("_Kernel", PyramidUtils.getFilter(0, true, false, 4));
        convoMaterial.SetInt("_KernelWidth", PyramidUtils.getFilterWidth(0, true, false, 4));

        /////////DOING LOW PASS //////////
        RenderTexture loPass = new RenderTexture(withMips);
        convoMaterial.SetFloat("_LOD", (float)0);
        convoMaterial.SetVector("_TexelSize", Vector2.one / (float)(size - 1));
        convoMaterial.SetFloatArray("_Kernel", getFilter(1, hiq, combinedMatrix));
        convoMaterial.SetInt("_KernelWidth", getFilterWidth(1, hiq, combinedMatrix));
        convoMaterial.SetFloat("_K", 1);
        Graphics.Blit(baseTex, loPass, convoMaterial);

        /////////DOING HI PASS //////////

        RenderTexture hiPass = new RenderTexture(withMips);
        RenderTexture hiPass2 = new RenderTexture(withMips);
        convoMaterial.SetFloat("_LOD", (float)0);
        convoMaterial.SetVector("_TexelSize", Vector2.one / (float)(size - 1));
        convoMaterial.SetFloatArray("_Kernel", getFilter(0, hiq, combinedMatrix));
        convoMaterial.SetInt("_KernelWidth", getFilterWidth(0, hiq, combinedMatrix));
        convoMaterial.SetFloat("_K", 1);

        if (preFilter)
        {
            Graphics.Blit(baseTex, hiPass2, convoMaterial);
            Graphics.Blit(hiPass2, hiPass, convoMaterial);
        }
        else
        {
            Graphics.Blit(baseTex, hiPass, convoMaterial);
        }


        //////////PRE FILTER//////////
        squareMaterial.SetFloat("_LOD", 0);
        RenderTexture squareInput = new RenderTexture(withMips);
        Graphics.Blit(hiPass, squareInput, squareMaterial);
        preFilterMaterial.SetTexture("_SquareTex", squareInput);
        preFilterMaterial.SetFloat("_FoveaSize", foveaSize);
        preFilterMaterial.SetFloat("_FoveaX", foveaX);
        preFilterMaterial.SetFloat("_FoveaY", foveaY);
        preFilterMaterial.SetFloat("_MeanDepth", meanDepth);

        Graphics.SetRenderTarget(resArray[0], 0);
        Graphics.Blit(hiPass, preFilterMaterial);
        //////////////////////////////
        hiPass.Release();
        hiPass2.Release();

        int s = size >> depth;
        for (int i = LodCount - 1; i >= 0; i--)
        {
            s <<= 1;

            noMips = new RenderTextureDescriptor(s, s, RenderTextureFormat.ARGBHalf, 0);
            noMips.autoGenerateMips = false;
            noMips.useMipMap = false;
            noMips.sRGB = false;

            withMips = new RenderTextureDescriptor(s, s, RenderTextureFormat.ARGBHalf, 0);
            withMips.autoGenerateMips = true;
            withMips.useMipMap = true;
            withMips.sRGB = false;

            convoMaterial.SetFloat("_LOD", (float)i);
            convoMaterial.SetVector("_TexelSize", Vector2.one / (float)(s - 1));

            squareMaterial.SetFloat("_LOD", 0);
            preFilterMaterial.SetFloat("_FoveaSize", foveaSize);
            preFilterMaterial.SetFloat("_FoveaX", foveaX);
            preFilterMaterial.SetFloat("_FoveaY", foveaY);
            preFilterMaterial.SetFloat("_MeanDepth", meanDepth);

            for (int j = 0; j < nbands; j++)
            {
                convoMaterial.SetFloatArray("_Kernel", getFilter(2 + j, hiq, combinedMatrix, nbands));
                convoMaterial.SetInt("_KernelWidth", getFilterWidth(2 + j, hiq, combinedMatrix, nbands));

                RenderTexture b0 = new RenderTexture(withMips);
                convoMaterial.SetFloat("_K", 1);

                if (preFilter)
                {
                    RenderTexture b02 = new RenderTexture(noMips);
                    Graphics.Blit(loPass, b02, convoMaterial);
                    convoMaterial.SetFloat("_K", -1);
                    Graphics.Blit(b02, b0, convoMaterial);
                    b02.Release();
                }
                else
                {
                    Graphics.Blit(loPass, b0, convoMaterial);
                }

                squareInput = new RenderTexture(withMips);

                Graphics.Blit(b0, squareInput, squareMaterial);
                preFilterMaterial.SetTexture("_SquareTex", squareInput);
                Graphics.SetRenderTarget(resArray[1 + j], i);
                Graphics.Blit(b0, preFilterMaterial);
                b0.Release();
                squareInput.Release();
            }


        }
        s = size >> depth;

        noMips = new RenderTextureDescriptor(s, s, RenderTextureFormat.ARGBHalf, 0);
        noMips.autoGenerateMips = false;
        noMips.useMipMap = false;
        noMips.sRGB = false;

        withMips = new RenderTextureDescriptor(s, s, RenderTextureFormat.ARGBHalf, 0);
        withMips.autoGenerateMips = true;
        withMips.useMipMap = true;
        withMips.sRGB = false;
        //////////PRE FILTER LOWPASS AFTER USED//////////
        squareMaterial.SetFloat("_LOD", LodCount);
        squareInput = new RenderTexture(withMips);
        Graphics.Blit(loPass, squareInput, squareMaterial);
        preFilterMaterial.SetTexture("_SquareTex", squareInput);
        preFilterMaterial.SetFloat("_FoveaSize", foveaSize);
        preFilterMaterial.SetFloat("_FoveaX", foveaX);
        preFilterMaterial.SetFloat("_FoveaY", foveaY);
        preFilterMaterial.SetFloat("_MeanDepth", meanDepth);

        Graphics.SetRenderTarget(resArray[0], LodCount);
        Graphics.Blit(loPass, preFilterMaterial);
        //////////////////////////////

        squareInput.Release();
        loPass.Release();
        return resArray;
    }

 
    public static RenderTexture[] SteerablePyramidNewNoise(int size, int depth, float foveaSize, float meanDepth, bool hiq, bool preFilter, float foveaX = 0.5f, float foveaY = 0.5f)
    {

        Texture2D noiseBase = new Texture2D(size, size, TextureFormat.RGBAFloat, true);
        for (int i = 0; i < size; i++)
        {
            for (int j = 0; j < size; j++)
            {
                noiseBase.SetPixel(i, j, new Color(Random.value, Random.value, Random.value, 1.0f));
            }
        }
        noiseBase.Apply();

        int LodCount = (int)Mathf.Floor(Mathf.Log(size, 2f));
        LodCount = Mathf.Min(LodCount, depth);

        RenderTexture[] resArray = new RenderTexture[3];
        for (int i = 0; i < 3; i++)
        {
            resArray[i] = new RenderTexture(size, size, 0, RenderTextureFormat.ARGBHalf, RenderTextureReadWrite.Linear);
            resArray[i].filterMode = FilterMode.Trilinear;
            resArray[i].useMipMap = true;
            resArray[i].autoGenerateMips = false;
            resArray[i].Create();
            resArray[i].hideFlags = HideFlags.HideAndDontSave;
        }

        Shader convoShader = Shader.Find("Hidden/Convolution2D");
        Material convoMaterial = new Material(convoShader);

        Shader squareShader = Shader.Find("Hidden/SquarePixel");
        Material squareMaterial = new Material(squareShader);
        Shader preFilterShader = Shader.Find("Hidden/PreFilter");
        Material preFilterMaterial = new Material(preFilterShader);

        RenderTextureDescriptor withMips = new RenderTextureDescriptor(size, size, RenderTextureFormat.ARGBHalf, 0);
        withMips.autoGenerateMips = true;
        withMips.useMipMap = true;
        withMips.sRGB = false;

        RenderTextureDescriptor noMips = new RenderTextureDescriptor(size, size, RenderTextureFormat.ARGBHalf, 0);
        noMips.autoGenerateMips = false;
        noMips.useMipMap = false;
        noMips.sRGB = false;

        /////////DOING LOW PASS //////////
        RenderTexture loPass = new RenderTexture(withMips);
        convoMaterial.SetFloat("_LOD", (float)0);
        convoMaterial.SetVector("_TexelSize", Vector2.one / (float)(size - 1));
        convoMaterial.SetFloatArray("_Kernel", getFilter(1, hiq, false));
        convoMaterial.SetInt("_KernelWidth", getFilterWidth(1, hiq, false));
        convoMaterial.SetFloat("_K", 1);
        Graphics.Blit(noiseBase, loPass, convoMaterial);

        /////////DOING HI PASS //////////

        RenderTexture hiPass = new RenderTexture(withMips);
        RenderTexture hiPass2 = new RenderTexture(withMips);
        convoMaterial.SetFloat("_LOD", (float)0);
        convoMaterial.SetVector("_TexelSize", Vector2.one / (float)(size - 1));
        convoMaterial.SetFloatArray("_Kernel", getFilter(0, hiq, false));
        convoMaterial.SetInt("_KernelWidth", getFilterWidth(0, hiq, false));
        convoMaterial.SetFloat("_K", 1);

        if (preFilter)
        {
            Graphics.Blit(noiseBase, hiPass2, convoMaterial);
            Graphics.Blit(hiPass2, hiPass, convoMaterial);
            hiPass2.Release();
        }
        else
        {
            Graphics.Blit(noiseBase, hiPass, convoMaterial);
        }


        for (int i = 0; i < size; i++)
        {
            for (int j = 0; j < size; j++)
            {
                noiseBase.SetPixel(i, j, new Color(Random.value, Random.value, Random.value, 1.0f));
            }
        }

        /////////DOING LOW PASS on new noise//////////
        convoMaterial.SetFloat("_LOD", (float)0);
        convoMaterial.SetVector("_TexelSize", Vector2.one / (float)(size - 1));
        convoMaterial.SetFloatArray("_Kernel", getFilter(1, hiq, false));
        convoMaterial.SetInt("_KernelWidth", getFilterWidth(1, hiq, false));
        convoMaterial.SetFloat("_K", 1);
        Graphics.Blit(noiseBase, loPass, convoMaterial);


        //////////PRE FILTER//////////
        squareMaterial.SetFloat("_LOD", 0);
        RenderTexture squareInput = new RenderTexture(withMips);
        Graphics.Blit(hiPass, squareInput, squareMaterial);
        preFilterMaterial.SetTexture("_SquareTex", squareInput);
        preFilterMaterial.SetFloat("_FoveaSize", foveaSize);
        preFilterMaterial.SetFloat("_FoveaX", foveaX);
        preFilterMaterial.SetFloat("_FoveaY", foveaY);
        preFilterMaterial.SetFloat("_MeanDepth", meanDepth);
        RenderTexture filtered = new RenderTexture(noMips);
        Graphics.Blit(hiPass, filtered, preFilterMaterial);
        //////////////////////////////
        Graphics.CopyTexture(filtered, 0, 0, resArray[0], 0, 0);


        int s = size >> depth;
        for (int i = LodCount - 1; i >= 0; i--)
        {
            s <<= 1;

            Texture2D noiseIter0 = new Texture2D(s, s, TextureFormat.RGBAFloat, true);
            for (int ii = 0; ii < s; ii++)
            {
                for (int jj = 0; jj < s; jj++)
                {
                    noiseIter0.SetPixel(ii, jj, new Color(Random.value, Random.value, Random.value, 1.0f));
                }
            }

            noiseIter0.Apply();

            Texture2D noiseIter1 = new Texture2D(s, s, TextureFormat.RGBAFloat, true);
            for (int ii = 0; ii < s; ii++)
            {
                for (int jj = 0; jj < s; jj++)
                {
                    noiseIter1.SetPixel(ii, jj, new Color(Random.value, Random.value, Random.value, 1.0f));
                }
            }

            noiseIter1.Apply();

            noMips = new RenderTextureDescriptor(s, s, RenderTextureFormat.ARGBHalf, 0);
            noMips.autoGenerateMips = false;
            noMips.useMipMap = false;
            noMips.sRGB = false;

            withMips = new RenderTextureDescriptor(s, s, RenderTextureFormat.ARGBHalf, 0);
            withMips.autoGenerateMips = true;
            withMips.useMipMap = true;
            withMips.sRGB = false;


            /////////DOING LOW PASS on new noise//////////
            RenderTexture loPass2 = new RenderTexture(withMips);
            convoMaterial.SetFloat("_LOD", (float)0);
            convoMaterial.SetVector("_TexelSize", Vector2.one / (float)(s - 1));
            convoMaterial.SetFloatArray("_Kernel", getFilter(1, hiq, false));
            convoMaterial.SetInt("_KernelWidth", getFilterWidth(1, hiq, false));
            convoMaterial.SetFloat("_K", 1);
            Graphics.Blit(noiseIter0, loPass2, convoMaterial);

            RenderTexture loPass3 = new RenderTexture(withMips);
            convoMaterial.SetFloat("_LOD", (float)0);
            convoMaterial.SetVector("_TexelSize", Vector2.one / (float)(s - 1));
            convoMaterial.SetFloatArray("_Kernel", getFilter(1, hiq, false));
            convoMaterial.SetInt("_KernelWidth", getFilterWidth(1, hiq, false));
            convoMaterial.SetFloat("_K", 1);
            Graphics.Blit(noiseIter1, loPass3, convoMaterial);

            convoMaterial.SetFloat("_LOD", (float)0);
            convoMaterial.SetVector("_TexelSize", Vector2.one / (float)(s - 1));

            convoMaterial.SetFloatArray("_Kernel", getFilter(2, hiq, false));
            convoMaterial.SetInt("_KernelWidth", getFilterWidth(2, hiq, false));

            RenderTexture b0 = new RenderTexture(withMips);
            convoMaterial.SetFloat("_K", 1);

            if (preFilter)
            {
                RenderTexture b02 = new RenderTexture(noMips);
                Graphics.Blit(loPass2, b02, convoMaterial);
                convoMaterial.SetFloat("_K", -1);
                Graphics.Blit(b02, b0, convoMaterial);
            }
            else
            {
                Graphics.Blit(loPass2, b0, convoMaterial);
            }

            convoMaterial.SetFloatArray("_Kernel", getFilter(3, hiq, false));
            convoMaterial.SetInt("_KernelWidth", getFilterWidth(3, hiq, false));
            convoMaterial.SetFloat("_K", 1);

            RenderTexture b1 = new RenderTexture(withMips);

            if (preFilter)
            {
                RenderTexture b12 = new RenderTexture(withMips);
                Graphics.Blit(loPass3, b12, convoMaterial);
                convoMaterial.SetFloat("_K", -1);
                Graphics.Blit(b12, b1, convoMaterial);
                b12.Release();
            }
            else
            {
                Graphics.Blit(loPass3, b1, convoMaterial);
            }
            //////////PRE FILTER B0//////////
            squareMaterial.SetFloat("_LOD", 0);
            preFilterMaterial.SetFloat("_FoveaSize", foveaSize);
            preFilterMaterial.SetFloat("_FoveaX", foveaX);
            preFilterMaterial.SetFloat("_FoveaY", foveaY);
            preFilterMaterial.SetFloat("_MeanDepth", meanDepth);

            squareInput = new RenderTexture(withMips);
            filtered = new RenderTexture(noMips);

            Graphics.Blit(b0, squareInput, squareMaterial);
            preFilterMaterial.SetTexture("_SquareTex", squareInput);
            Graphics.Blit(b0, filtered, preFilterMaterial);
            Graphics.CopyTexture(filtered, 0, 0, resArray[1], 0, i);

            //////////PRE FILTER B1//////////
            Graphics.Blit(b1, squareInput, squareMaterial);
            preFilterMaterial.SetTexture("_SquareTex", squareInput);
            Graphics.Blit(b1, filtered, preFilterMaterial);
            Graphics.CopyTexture(filtered, 0, 0, resArray[2], 0, i);


            loPass2.Release();
            loPass3.Release();
            b0.Release();
            b1.Release();
            squareInput.Release();
            filtered.Release();

        }
        s = size >> depth;

        noMips = new RenderTextureDescriptor(s, s, RenderTextureFormat.ARGBHalf, 0);
        noMips.autoGenerateMips = false;
        noMips.useMipMap = false;
        noMips.sRGB = false;

        withMips = new RenderTextureDescriptor(s, s, RenderTextureFormat.ARGBHalf, 0);
        withMips.autoGenerateMips = true;
        withMips.useMipMap = true;
        withMips.sRGB = false;
        //////////PRE FILTER LOWPASS AFTER USED//////////
        squareMaterial.SetFloat("_LOD", LodCount);
        squareInput = new RenderTexture(withMips);
        Graphics.Blit(loPass, squareInput, squareMaterial);
        preFilterMaterial.SetTexture("_SquareTex", squareInput);
        preFilterMaterial.SetFloat("_FoveaSize", foveaSize);
        preFilterMaterial.SetFloat("_FoveaX", foveaX);
        preFilterMaterial.SetFloat("_FoveaY", foveaY);
        preFilterMaterial.SetFloat("_MeanDepth", meanDepth);
        filtered = new RenderTexture(noMips);
        Graphics.Blit(loPass, filtered, preFilterMaterial);
        //////////////////////////////
        Graphics.CopyTexture(filtered, 0, 0, resArray[0], 0, LodCount);

        filtered.Release();
        squareInput.Release();
        hiPass.Release();
        loPass.Release();
        return resArray;
    }


}
